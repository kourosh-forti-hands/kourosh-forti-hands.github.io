---
import { siteConfig } from "../config";

const hasProjects = siteConfig.projects && siteConfig.projects.length > 0;
const hasExperience = siteConfig.experience && siteConfig.experience.length > 0;
const hasEducation = siteConfig.education && siteConfig.education.length > 0;
---

<!-- Clean Header -->
<header id="header" class="fixed top-0 left-0 right-0 z-50">
  <nav style="background: rgba(255, 255, 255, 0.98); backdrop-filter: blur(10px); border-bottom: 1px solid var(--border-color);">
    <div class="container">
      <div class="flex items-center justify-between" style="height: 4rem;">

        <!-- Logo/Brand Section -->
        <div class="flex items-center">
          <a href="#hero" class="flex items-center gap-3">
            <div style="width: 2.5rem; height: 2.5rem; background: var(--color-accent); border-radius: var(--radius-md);" class="flex items-center justify-center">
              <span style="color: white; font-weight: bold; font-size: 1.125rem;">
                {siteConfig.name.charAt(0)}
              </span>
            </div>
            <div class="hidden sm:block">
              <div style="font-size: 1.125rem; font-weight: 600; color: var(--color-primary); line-height: 1.2;">
                {siteConfig.name}
              </div>
              <div style="font-size: 0.75rem; color: var(--text-secondary); line-height: 1.2;">
                {siteConfig.title}
              </div>
            </div>
          </a>
        </div>

        <!-- Desktop Navigation -->
        <div class="hidden lg:flex items-center" style="gap: 2rem;">
          <a href="#about" class="nav-link" data-section="about">
            About
          </a>
          {hasProjects && (
            <a href="#projects" class="nav-link" data-section="projects">
              Projects
            </a>
          )}
          {hasExperience && (
            <a href="#experience" class="nav-link" data-section="experience">
              Experience
            </a>
          )}
          {hasEducation && (
            <a href="#education" class="nav-link" data-section="education">
              Education
            </a>
          )}
          <a href={`mailto:${siteConfig.social.email}`} class="btn btn-primary">
            Contact
          </a>
        </div>

        <!-- Mobile Menu Button -->
        <button
          id="mobile-menu-button"
          class="lg:hidden p-2 rounded-lg"
          style="background: transparent; border: 1px solid var(--border-color);"
          aria-label="Toggle mobile menu"
        >
          <svg width="24" height="24" style="color: var(--text-primary);" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>
  </nav>

  <!-- Mobile Menu -->
  <div
    id="mobile-menu"
    class="lg:hidden fixed inset-0"
    style="top: 4rem; background: white; border-top: 1px solid var(--border-color); transform: translateX(100%); transition: transform 0.3s ease;"
  >
    <nav class="container" style="padding: 1.5rem;">
      <div class="flex flex-col" style="gap: 1rem;">
        <a href="#about" class="mobile-nav-link" data-section="about">
          About
        </a>
        {hasProjects && (
          <a href="#projects" class="mobile-nav-link" data-section="projects">
            Projects
          </a>
        )}
        {hasExperience && (
          <a href="#experience" class="mobile-nav-link" data-section="experience">
            Experience
          </a>
        )}
        {hasEducation && (
          <a href="#education" class="mobile-nav-link" data-section="education">
            Education
          </a>
        )}
        <div style="padding-top: 1rem; margin-top: 1rem; border-top: 1px solid var(--border-color);">
          <a href={`mailto:${siteConfig.social.email}`} class="btn btn-primary w-full text-center">
            Contact
          </a>
        </div>
      </div>
    </nav>
  </div>
</header>

<style>
  .nav-link {
    color: var(--text-secondary);
    font-weight: 500;
    text-decoration: none;
    transition: color var(--transition-fast);
    font-size: 0.9rem;
  }

  .nav-link:hover {
    color: var(--color-primary);
  }

  .nav-link.active {
    color: var(--color-accent);
  }

  .mobile-nav-link {
    display: block;
    padding: 0.75rem 1rem;
    color: var(--text-secondary);
    font-weight: 500;
    text-decoration: none;
    background: var(--bg-secondary);
    border-radius: var(--radius-md);
    transition: all var(--transition-fast);
  }

  .mobile-nav-link:hover {
    background: var(--bg-tertiary);
    color: var(--color-primary);
  }

  .mobile-nav-link.active {
    background: var(--color-accent);
    color: white;
  }

  .w-full {
    width: 100%;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.getElementById('header');
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const navLinks = document.querySelectorAll('.nav-link, .mobile-nav-link');
    let isMenuOpen = false;

    // Handle scroll effects
    window.addEventListener('scroll', () => {
      const currentScroll = window.pageYOffset;

      if (currentScroll > 20) {
        header.style.boxShadow = 'var(--shadow-md)';
      } else {
        header.style.boxShadow = 'none';
      }
    });

    // Mobile menu toggle
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        isMenuOpen = !isMenuOpen;

        if (isMenuOpen) {
          mobileMenu.style.transform = 'translateX(0)';
          document.body.style.overflow = 'hidden';
        } else {
          mobileMenu.style.transform = 'translateX(100%)';
          document.body.style.overflow = '';
        }
      });
    }

    // Handle navigation links
    navLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        if (link.getAttribute('href').startsWith('#')) {
          e.preventDefault();
          const targetId = link.getAttribute('href');
          const targetSection = document.querySelector(targetId);

          if (targetSection) {
            const headerHeight = 80;
            const targetPosition = targetSection.offsetTop - headerHeight;

            window.scrollTo({
              top: targetPosition,
              behavior: 'smooth'
            });

            // Close mobile menu if open
            if (isMenuOpen && mobileMenu) {
              isMenuOpen = false;
              mobileMenu.style.transform = 'translateX(100%)';
              document.body.style.overflow = '';
            }
          }
        }
      });
    });

    // Set active navigation link based on current section
    const sections = document.querySelectorAll('section[id]');

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const sectionId = entry.target.id;
          navLinks.forEach(link => {
            const linkSection = link.getAttribute('data-section');
            if (linkSection === sectionId) {
              link.classList.add('active');
            } else {
              link.classList.remove('active');
            }
          });
        }
      });
    }, {
      rootMargin: '-100px 0px -50% 0px',
      threshold: 0.1
    });

    sections.forEach(section => {
      observer.observe(section);
    });
  });
</script>